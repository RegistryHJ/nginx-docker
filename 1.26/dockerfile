# vim:set ft=dockerfile:
FROM registryhj/ubuntu:22.04

ENV NGINX_VERSION=1.26.3
ENV NJS_VERSION=0.8.9
ENV NJS_RELEASE=1~jammy
ENV PKG_RELEASE=1~jammy 
ENV DYNPKG_RELEASE=2~jammy

RUN \
  set -x; \
  groupadd --system --gid 101 nginx; \
  useradd --system --gid nginx --no-create-home --home /nonexistent --comment "nginx user" --shell /bin/false --uid 101 nginx; \
  apt update; \
  apt install --no-install-recommends --no-install-suggests -y gnupg1 ca-certificates; \
  NGINX_GPGKEYS="573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 8540A6F18833A80E9C1653A42FD21310B49F6B46 9E9BE90EACBCDE69FE9B204CBCDCD8A38D88A2B3"; \
  NGINX_GPGKEY_PATH=/etc/apt/keyrings/nginx-archive-keyring.gpg; \
  export GNUPGHOME="$(mktemp -d)"; \
  found=''; \
  for NGINX_GPGKEY in $NGINX_GPGKEYS; do \
    for server in hkp://keyserver.ubuntu.com:80 pgp.mit.edu; do \
      echo "Fetching GPG key $NGINX_GPGKEY from $server"; \
      gpg1 --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$NGINX_GPGKEY" && found=yes && break; \
    done; \
    test -z "$found" && echo >&2 "error: failed to fetch GPG key $NGINX_GPGKEY" && exit 1; \
  done; \
  gpg1 --export "$NGINX_GPGKEYS" > "$NGINX_GPGKEY_PATH"; \
  rm -rf "$GNUPGHOME"; \
  apt remove --purge --auto-remove -y gnupg1; \
  rm -rf /var/lib/apt/lists/*; \
  dpkgArch="$(dpkg --print-architecture)"; \
  nginxPackages=" \
    nginx=${NGINX_VERSION}-${PKG_RELEASE} \
    nginx-module-xslt=${NGINX_VERSION}-${DYNPKG_RELEASE} \
    nginx-module-geoip=${NGINX_VERSION}-${DYNPKG_RELEASE} \
    nginx-module-image-filter=${NGINX_VERSION}-${DYNPKG_RELEASE} \
    nginx-module-njs=${NGINX_VERSION}+${NJS_VERSION}-${NJS_RELEASE} \
  "; \
  case "$dpkgArch" \
    in amd64 | arm64) \
      echo "deb [signed-by=$NGINX_GPGKEY_PATH] https://nginx.org/packages/ubuntu/ jammy nginx" >> /etc/apt/sources.list.d/nginx.list; \
      apt update; \
      ;; \
    *) \
      tempDir="$(mktemp -d)"; \
      chmod 777 "$tempDir"; \
      savedAptMark="$(apt-mark showmanual)"; \
      apt update; \
      apt install --no-install-recommends --no-install-suggests -y \
        curl devscripts equivs git libxml2-utils lsb-release xsltproc; \
      ( \
        cd "$tempDir"; \
        REVISION="${NGINX_VERSION}-${PKG_RELEASE}"; \
        REVISION=${REVISION%~*}; \
        curl -f -L -O https://github.com/nginx/pkg-oss/archive/${REVISION}.tar.gz; \
        PKGOSSCHECKSUM="3a4e869eded0c71e92f522e94edffea7fbfb5e78886ea7e484342fa2e028c62099a67d08860c249bf93776da97b924225e0d849dbb4697b298afe5421d7d6fea *${REVISION}.tar.gz"; \
        if [ "$(openssl sha512 -r ${REVISION}.tar.gz)" = "$PKGOSSCHECKSUM" ]; then \
          echo "pkg-oss tarball checksum verification succeeded!"; \
        else \
          echo "pkg-oss tarball checksum verification failed!"; \
          exit 1; \
        fi; \
        tar xzvf ${REVISION}.tar.gz; \
        cd pkg-oss-${REVISION}; \
        cd debian; \
        for target in base module-geoip module-image-filter module-njs module-xslt; do \
          make rules-$target; \
          mk-build-deps --install --tool="apt -o Debug::pkgProblemResolver=yes --no-install-recommends --yes" \
            debuild-$target/nginx-$NGINX_VERSION/debian/control; \
        done; \
        make base module-geoip module-image-filter module-njs module-xslt; \
      ); \
      apt-mark showmanual | xargs apt-mark auto > /dev/null; \
      { [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; }; \
      ls -lAFh "$tempDir"; \
      ( cd "$tempDir" && dpkg-scanpackages . > Packages ); \
      grep '^Package: ' "$tempDir/Packages"; \
      echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list; \
      apt -o Acquire::GzipIndexes=false update; \
      ;; \
  esac; \
  apt install --no-install-recommends --no-install-suggests -y \
    $nginxPackages gettext-base curl; \
  apt remove --purge --auto-remove -y; \
  rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list; \
  if [ -n "$tempDir" ]; then \
    apt purge -y --auto-remove; \
    rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list; \
  fi; \
  ln -sf /dev/stdout /var/log/nginx/access.log; \
  ln -sf /dev/stderr /var/log/nginx/error.log; \
  mkdir /docker-entrypoint.d;

COPY docker-entrypoint.sh /
COPY 10-listen-on-ipv6-by-default.sh /docker-entrypoint.d
COPY 15-local-resolvers.envsh /docker-entrypoint.d
COPY 20-envsubst-on-templates.sh /docker-entrypoint.d
COPY 30-tune-worker-processes.sh /docker-entrypoint.d
ENTRYPOINT ["/docker-entrypoint.sh"]

EXPOSE 80

STOPSIGNAL SIGQUIT

CMD ["nginx", "-g", "daemon off;"]